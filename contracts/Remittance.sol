pragma solidity ^0.4.24;

// import "./Pausible.sol";
import "./RemittanceLib.sol";

/*
Remittance contract. 
*/
contract Remittance { //is Pausible {

    using RemittanceLib for RemittanceLib.RemittanceStorage;
    RemittanceLib.RemittanceStorage private self;

    /**
     * This function sends money to the remittance contract. It accept the
     * remittance hash that Alice must generate outside of the contract by calling
     * the getKeccak256 function. This hash will be generated by the applicaton 
     * that calls this function.
     **/
    function sendMoney(bytes32 remittanceHash, uint secondsClaimBack) public payable {
        
        self.sendMoney(remittanceHash, secondsClaimBack);

    }

    /**
     * Function that allows Carol to withdraw the balance in the remittance 
     * contract. Carol has to provide the password that Bob gave to her. 
     * It's OK for the password to be visible on the
     * blockchain by other people, even if the transaction might not have 
     * been mined. Because only Carol can withdraw the funds because her address
     * is mixed with the password when calling the keccak256 function. Neither Bob,
     * Alice or anybody else could snatch the funds before she could.
     **/
    function withdraw(string passwordBob) public {

        self.withdraw(passwordBob);

    } 
 
    /**
     * Alice can claim back the funds after the deadline has been reached
     * by using Bob's password and Carol's address
     **/
    function claimBack(address carol, string passwordBob) public payable {

        self.claimBack(carol, passwordBob);

    }
 
    /**
     * Function that will be used both by the contract, as well as Alice
     * who will generate the hash based on bob's password and Carol's 
     * address, before calling the function sendMoney. 
     **/
    function getKeccak256(address _address, string passwordBob) 
        public view returns (bytes32) {
            
        return self.getKeccak256(_address, passwordBob);

    }

}

